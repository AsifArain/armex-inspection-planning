function fSolve_ICRA16_GDM( alpha,beta,gamma,solve_tomography,para_,dir_ )


fprintf(1,['\n\n',...
           '*********************************************************************\n\n',...
           '                     SOLVE GAS TOMOGRAPHY (ICRA16) \n\n',...
           '*********************************************************************\n\n'])

% -----------------------------------------------------------------------------------
% 
% -----------------------------------------------------------------------------------
FoV           = para_.FieldOfViewDEG;
FoVragd       = para_.FieldOfViewDEG;%/2;
SensorRange.m = para_.SensingRangeM;


% alpha = 0.75;
% beta  = 0.50;
para_.deltaGain = 0.75; % compromise on ERQ (fusion icra)

% -----------------------------------------------------------------------------------
%                                   YAML file data
% -----------------------------------------------------------------------------------
% ParamPreprocess.MapYAML
% fileYAML = ReadYamlRaw(ParamPreprocess.MapYAML);
% fileYAML = ReadYamlRaw('map.yaml');

dataYAML = ReadYamlRaw([dir_.env,para_.EnvironmentYamlFile]);
dataYAML_origin = cell2mat(dataYAML.origin);

robot_origin_x = abs(dataYAML_origin(1)/dataYAML.resolution);
robot_origin_y = abs(dataYAML_origin(2)/dataYAML.resolution);
% map_pix_size   = dataYAML.resolution;

% robot_origin_in_map_x = 1;
% robot_origin_in_map_y = 1;
% dataYAML.resolution          = 1;
% -----------------------------------------------------------------------------------



%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
% 
%                         PREPROCESS: MAPS AND GLOBAL TSP
% 
%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
if solve_tomography.preprocess_maps
    
    
    fprintf(1,'*********************************************************************\n')
    fprintf(1,'                         Preprocessing MAPS \n')
    fprintf(1,'*********************************************************************\n\n')
    

    if para_.ReconDetectionArtificial
        mean_map = [];
        cell_coords_x = [];
        cell_coords_y = [];
    else
        load([dir_.DetectionResults,'reconstruction_detection.mat']);
    end

    % preprocessing parametes:
    % --------------------------
    para_.GraphCnt                        = 4; % graph connectivity (4/8).
    para_.Ct                              = 0; % travelling cost matrix (yes/no).
    para_.TravCost                        = 10; % travelling cost (sec) for one meter travel.
    para_.numFoVs                         = 4; % nummber of elementray sensing action per cell.
    para_.A                               = 0; % generate connectivity matrix A (yes/no).
    para_.AWM                             = 0; % artificial world map (yes/no).
    %para_.num_of_artificial_hotspots      = 25;
    para_.do_nTCell                       = 0;
    %para_.nTLength                        = 3; % non traversable area around an obstacle (meters).
    %para_.gray2binImageThreshold          = 0.98; 
    %para_.highConcentrationThreshold_PPM  = 500;%2500; %5000; 
    para_.radiusFreeCell_m                = 2; % radius of the circle to look for free cell if (centroid) hotspot is occupied cell.
    para_.centroid_dist_m                 = 1.5;%3.0;%2.5;%1.5; % distance to look for centroid within
    para_.NumOfCellsForInOutAnglesTSP     = 5; % number of cells considered for entrance and exit angles at each hotspot
    

    % tsp parameters:
    % ------------------
    para_.TravCost    = 10; %ParamPreprocess.TravCost;
    para_.ConfOBS     = 1;
    para_.EoTinAstar  = 0;
    
    visualize = 0;

       
    [ map_env,...
      map_recon,...
      map_coverage,...
      OBS,...
      o,...
      E,...
      T,...
      hotspotSEQ,...
      InOutTSPAnglesAll,...
      InOutTSPAnglesMean,...
      FocusTSPAngles,...
      FoVfaces,...
      SensorRange,...
      robotStartCellInMap,...
      tPreprocess ] = fPreprocessMap( FoV,...
                                      SensorRange,...
                                      cell_coords_x,...
                                      cell_coords_y,...
                                      robot_origin_x,...
                                      robot_origin_y,...
                                      dataYAML,...
                                      para_,...
                                      dir_,...
                                      visualize );
    
    save([dir_.TomographyResults,'preprocess_maps.mat'],...
        'map_env',...
        'map_recon',...
        'map_coverage',...
        'OBS',...
        'o',...
        'E',...
        'T',...
        'hotspotSEQ',...
        'InOutTSPAnglesAll',...
        'InOutTSPAnglesMean',...
        'FocusTSPAngles',...
        'FoVfaces',...
        'SensorRange',...
        'robotStartCellInMap',...
        'tPreprocess');

    close all;
    disp('-- preprocess map saved')
    
end


%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
% 
%                               SPP HOTSPOTS (LOCAL SOLUTIONS)
% 
%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
if solve_tomography.spp_hotspots
    
    fprintf(1,['\n\n',...
           '*********************************************************************\n',...
           '                      SPP Hotspots (local solutions) \n',...
           '*********************************************************************\n\n'])
    
    visualize = 0;
    
    load([dir_.TomographyResults,'preprocess_maps.mat'],...
        'hotspotSEQ',...
        'InOutTSPAnglesMean',...
        'FocusTSPAngles',...
        'OBS',...
        'map_coverage',...
        'map_env',...
        'map_recon',...
        'SensorRange');
    
    for i = 1:numel(hotspotSEQ)
        
        % ith hotspot
        hotspot = hotspotSEQ(i);
        

        % preprocessing parameters:
        % --------------------------
        para_.A                                   = 1;
        para_.D                                   = 1;
        para_.GraphCnt                            = 4; % graph connectivity (4/8).
        %paramPreprocess.MapRes                              = MAP_CELL_SIZE_M; % required cell size in meter.
        para_.TravCost                            = 10; % travelling cost (sec) for one meter travel.
        para_.PixSize                             = 1;    % original (map) pixel size (meters).
        para_.numFoVs                             = 4;              % nummber of elementray sensing action per cell.
        para_.AWM                                 = 1;              % artificial world map (yes/no).
        para_.RWM                                 = 0;              % real world map (yes/no).
        para_.MapFig                              = '';
        para_.MapTxt                              = [];
        %paramPreprocess.SenDom                             = 'ComputeNew';
        para_.SenDom                              = 'UseEarlier';
        para_.CoM                                 = hotspot;
        para_.startConf                           = 1;
        para_.innerRadius_m                       = 1; % min radius where sensing conf are not allowed.
        para_.AngularStepForDistanceFocusPoint    = 10; % angular step to find distance focus point around hotspot
        %para_.NumOfCandConf                       = 200; % number of allowed cand conf.
        
        InOutTSPAng = InOutTSPAnglesMean(i,:);
        FocusTSPAng = FocusTSPAngles(i);
       
       
        [ conf_theta,...
          conf_crossAngles,...
          conf_crossAngles_G,...
          SensorRange,...
          OBS,...
          V,...
          oV,...
          confKept,...
          confRemoved,...
          cellKept,...
          cellRemoved,...
          FoVfaces,...
          map_candConf,...
          map_coverage,...
          map_env,... 
          BestFocusPointGain,...
          BestFocusPointAng,...
          refDistPoint,...
          D,...
          tPreprocess ] = fPreprocessHotspotVCrossAngles( FoV,...
                                                          OBS,...
                                                          SensorRange,...
                                                          map_coverage,...
                                                          map_env,...
                                                          hotspot,...
                                                          FocusTSPAng,...
                                                          dataYAML,...
                                                          para_,...
                                                          visualize );
                                                       
        save([dir_.TomographyLocalSol,'preprocess_XVD_hotspot',num2str(i),'.mat'],...
            'conf_theta',...
            'conf_crossAngles',...
            'conf_crossAngles_G',...
            'SensorRange',...
            'OBS',...
            'V',...
            'oV',...
            'confKept',...
            'confRemoved',...
            'cellKept',...
            'cellRemoved',...
            'FoVfaces',...
            'map_candConf',...
            'map_coverage',...
            'map_env',...
            'BestFocusPointGain',...
            'BestFocusPointAng',...
            'refDistPoint',...
            'D',...
            'tPreprocess');
        
        
        % --- optimization
        hotspot_num = i;
        strategy = para_.ExplorationStrategy; %para_.TomographyPlanType; %'icra16';
        NumOfAllowedConf = para_.NumberOfConf_SPPH;
        
        EXP_TITLE = para_.ExperimentTitle;
        save('SPP_HOTSPOT_DATA.mat',...
             'hotspot_num',...
             'EXP_TITLE',...
             'strategy',...
             'NumOfAllowedConf',...
             'alpha',...
             'beta',...
             'gamma');
        
        system('python main_hotspot.py');
        %system('python main.py')
        %pause
        close all


    end
    
    
    

end



%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
% 
%                               SPP FUSION (GLOBAL SOLUTION)
% 
%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
if solve_tomography.fusion
    
    fprintf(1,['\n\n',...
           '*********************************************************************\n',...
           '                      SPP Fusion \n',...
           '*********************************************************************\n\n'])
    visualize = 0;
    
    % {
    
    % --------------------------------------------------
    % SETUP FOR FUSION
    % --------------------------------------------------

    load([dir_.TomographyResults,'preprocess_maps.mat'],...
        'FoVfaces',...
        'hotspotSEQ',...
        'map_env',...
        'map_coverage',...
        'OBS',...
        'SensorRange');

    % preprocess parameters:    
    % -------------------------------------------------------------------------
    para_.numFoVs                      = 4; % nummber of elementray sensing action per cell.
    % paramPreprocess.SenDom                     = 'ComputeNew';
    para_.SenDom                       = 'UseEarlier';
    para_.DistanceForRedundantConfs_m  = 3*para_.SensingRangeM; %2; % min distance to check redundant confs.
    para_.XAnglesForRedundantConfs_deg = 15;
    para_.MapRes                       = para_.ReconTomographyCellSizeM; % required cell size in meter.
    
    
    [  selectedConf_sppH,...
       selectedConfGlobal_sppH,...
       selectedConfGlobalCell_sppH,...
       selectedConfTheta_sppH,...
       infoGain_sppH,...
       infoGainG_sppH,...
       infoGainU_sppH,...
       maxDs_sppH,...
       max1Vs_sppH,...
       referenceDistPoint_sppH,...
       distMatrix_selectedConfGlobal_sppH,...
       DistForRedConfs_cell,...
       minDistSelectedConfGlobal,...
       redundantConfGlobal_sppH,...
       redundantConfGlobalCell_sppH,...
       redundantConfSets_sppH,...
       redundantConfPairsAll_sppH,...
       dist_redundantConfPairsAll_sppH,...
       subH_RedundantConfPairsAll_sppH] = fPreprocessFusionSetupH( FoVfaces,...
                                                                  hotspotSEQ,...
                                                                  map_env,...
                                                                  alpha,...
                                                                  beta,...
                                                                  dir_,...
                                                                  para_,...
                                                                  visualize );
        
    save([dir_.TomographyFusion,'preprocess_fusion_setup_H.mat'],...
        'selectedConf_sppH',...
        'selectedConfGlobal_sppH',...
        'selectedConfGlobalCell_sppH',...
        'selectedConfTheta_sppH',...
        'infoGain_sppH',...
        'infoGainG_sppH',...
        'infoGainU_sppH',...
        'maxDs_sppH',...
        'max1Vs_sppH',...
        'referenceDistPoint_sppH',...
        'distMatrix_selectedConfGlobal_sppH',...
        'DistForRedConfs_cell',...
        'minDistSelectedConfGlobal',...
        'redundantConfGlobal_sppH',...
        'redundantConfGlobalCell_sppH',...
        'redundantConfSets_sppH',...
        'redundantConfPairsAll_sppH',...
        'dist_redundantConfPairsAll_sppH',...
        'subH_RedundantConfPairsAll_sppH');

    
    
    % -----------------------------------------------
    % SPP FUSION
    % -----------------------------------------------
    %load([dir_.TomographyResults,'preprocess_maps.mat'],...
    %    'FoVfaces',...
    %    'hotspotSEQ',...
    %    'map_env',...
    %    'map_coverage',...
    %    'OBS',...
    %    'SensorRange');

    %load([dir_.TomographyFusion,'preprocess_fusion_setup_H.mat']);

    % preprocess parameters:
    % --------------------------
    para_.numFoVs                     = 4; % nummber of elementray sensing action per cell.
    % paramPreprocess.SenDom                    = 'ComputeNew';
    para_.SenDom                      = 'UseEarlier';
    para_.MapRes                      = para_.ReconTomographyCellSizeM; % required cell size in meter.
    para_.candConfRadiusForRedConfs_m = 1.5*para_.SensingRangeM; % circular area for the candidate 
                                                                      % conf around redundant confs


    for i = 1:size(redundantConfPairsAll_sppH.num,1)

        PairNumToHandle = i

        [  V,...
           oV,...
           constV,...
           confKept,...
           confRemoved,...
           cellKept,...
           cellRemoved,...
           FoVfaces,...
           map_candConfFusion,...
           confTheta,...
           confCrossAngles,...
           confCrossAngles_G,...
           redundantConf_ind,...
           fixedConf_subH,...
           subHotspots,...
           infoGainSubH_sppH,...
           subH_RedundantConfPairsAll_sppH,...
           Z ] = fPreprocessPairwiseFusion( FoVfaces,...
                                            hotspotSEQ,...
                                            map_env,...
                                            FoV,...
                                            map_coverage,...
                                            SensorRange,...
                                            OBS,...
                                            alpha,...
                                            beta,...
                                            infoGain_sppH,...
                                            infoGainG_sppH,...
                                            infoGainU_sppH,...
                                            maxDs_sppH,...
                                            max1Vs_sppH,...
                                            selectedConf_sppH,...
                                            selectedConfGlobal_sppH,...
                                            redundantConfPairsAll_sppH,...
                                            subH_RedundantConfPairsAll_sppH,...
                                            referenceDistPoint_sppH,...
                                            PairNumToHandle,...
                                            dist_redundantConfPairsAll_sppH,...
                                            dataYAML,...
                                            dir_,...
                                            para_,...
                                            visualize );
                                        
        save([dir_.TomographyFusion,'preprocess_pairwise_fusion',...
            num2str(PairNumToHandle),'.mat'],...
            'V',...
            'oV',...
            'constV',...
            'confKept',...
            'confRemoved',...
            'cellKept',...
            'cellRemoved',...
            'FoVfaces',...
            'map_candConfFusion',...
            'confTheta',...
            'confCrossAngles',...
            'confCrossAngles_G',...
            'redundantConf_ind',...
            'fixedConf_subH',...
            'subHotspots',...
            'infoGainSubH_sppH',...
            'subH_RedundantConfPairsAll_sppH',...
            'Z');
        
        %close all
        % run spp-fusion
        %r=python('main.py')
        %system('python main.py')
        
        
        deltaGain = para_.deltaGain;
        EXP_TITLE = para_.ExperimentTitle;
        %plan_type = para_.TomographyPlanType; %'icra16';
        strategy = para_.ExplorationStrategy; %'icra16';
        save('SPP_FUSION_DATA.mat',...
            'EXP_TITLE',...
            'strategy',...
            'PairNumToHandle',...
            'deltaGain',...
            'alpha',...
            'beta',...
            'gamma')
        
        system('python main_fusion.py')
        %pause
        close all
        
        
    end
    
    

    disp('----------- preprocess pairwise fusion is saved ')
    
    %}
    
    [  Conf,...
       selectedConfGlobal_sppHF,...
       selectedConf_sppHF,...
       RedundantConf_ind,...
       MAP_candConfFusion ] = fIntegrateConfHF( dir_,visualize );

    save([dir_.TomographyFusion,'integrated_solution_hotspots_fusions.mat'],...
        'Conf',...
        'selectedConfGlobal_sppHF',...
        'selectedConf_sppHF',...
        'RedundantConf_ind',...
        'MAP_candConfFusion')
    
    disp('----------- fusion integration is saved ')

end


%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
% 
%                                       TSP
% 
%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
if solve_tomography.tsp_spp
    
    fprintf(1,['\n\n',...
           '*********************************************************************\n',...
           '                      TSP Tomography \n',...
           '*********************************************************************\n\n'])
       
    load([dir_.TomographyResults,'preprocess_maps.mat'],...
        'o','E','T','FoVfaces','map_env','robotStartCellInMap','OBS');
    
    load([dir_.TomographyFusion,'integrated_solution_hotspots_fusions.mat'],'Conf');
    
    % ------------------
    % TSP
    % ------------------

    % {
    % conf vector for tsp.
    ConfTSP = Conf';

    f = FoVfaces.num;

    % robot start conf.
    robotStartPosition_ind = sub2ind(size(map_env),robotStartCellInMap(1),...
                                                   robotStartCellInMap(2));
    robotStartConf_ind = ((robotStartPosition_ind-1)*f)+1;
    ConfTSP(robotStartConf_ind) = 1;

    % removing conf on occupied cells
    % --------------------------------

    % obs-conf nums
    confOBS = zeros(numel(OBS.ind)*f,1);
    for i = 1:numel(OBS.ind)
        confOBS(((i-1)*f)+1:((i-1)*f)+f) = (((OBS.ind(i)-1)*f)+1):(((OBS.ind(i)-1)*f)+f);
    end
    ConfTSP(:,confOBS)  = [];
    %size(ConfTSP)

    ConfTSP = ConfTSP';
    %size(ConfTSP)


    % TSP PARAMETERS
    % --------------
    paramTSP.TravCost    = 10; %ParamPreprocess.TravCost;
    paramTSP.ConfOBS     = 1;
    paramTSP.EoTinAstar  = 0;

    [ tRoute,...
      TRoute,...
      tCost,...
      dmatTSP,...
      PredTSP,...
      tTSP ] = fTSP( o,FoVfaces,ConfTSP,E,T,map_env,OBS,paramTSP );


    % traveling route with sequence starting from initial position
    tRouteOrderedWRTStart = tRoute(1:end-1,:);
    tRouteOrderedWRTStart = circshift(tRouteOrderedWRTStart,numel(tRouteOrderedWRTStart)-...
        find(tRouteOrderedWRTStart==robotStartConf_ind)+1);

    % conf sequence number in the order of conf vector index (start position is not a conf)
    [~,confSequenceNum,~] = intersect(tRouteOrderedWRTStart,find(Conf));

    % since start position is not a conf,
    confSequenceNum = confSequenceNum-1;
    
    save([dir_.TomographyResults,'tsp_tomography_spp.mat'],...
        'tRoute',...
        'TRoute',...
        'tCost',...
        'dmatTSP',...
        'PredTSP',...
        'tTSP',...
        'confSequenceNum',...
        'tRouteOrderedWRTStart');
    
end


%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
%
%                               FIXED MEASUREMENTS
%
%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
if solve_tomography.measurements_spp_fixed == 1
    
    
    fprintf(1,['\n\n',...
           '*********************************************************************\n',...
           '                      SPP Fixed Measurements \n',...
           '*********************************************************************\n\n'])
    
    
    load([dir_.TomographyLocalSol,'preprocess_XVD_hotspot',num2str(1),'.mat'],...
        'FoVfaces','SensorRange','map_env');
    
    load([dir_.TomographyFusion,'integrated_solution_hotspots_fusions.mat'],'Conf');
    load([dir_.TomographyResults,'tsp_tomography_spp.mat'],'confSequenceNum');
    
    f = FoVfaces.num;
    Conf_ind  = find(Conf);                      % IDs of selected conf.
    ConfCELL_ind = fix(Conf_ind/f)+(~~mod(Conf_ind,f));   % cell num for each conf num.
    Conf_num = mod(Conf_ind,f)+(~mod(Conf_ind,f)*f);  % conf num within a cell.
    [ConfCELL_r,ConfCELL_c] = ind2sub(size(map_env),ConfCELL_ind); % row and col of cell num.
    
    sensing_confs = [confSequenceNum,...
                     ConfCELL_r,...
                     ConfCELL_c,...
                     FoVfaces.lgt(Conf_num),...
                     FoV*ones(numel(Conf_ind),1),...
                     SensorRange.cell*ones(numel(Conf_ind),1),...
                     FoV*ones(numel(Conf_ind),1),...
                     0*ones(numel(Conf_ind),1)];

    sensing_confs = sortrows(sensing_confs,1)
    sensing_confs = sensing_confs(:,2:end);
    
    
    
    % -- all conf placements
    for capsule = 1:size(sensing_confs,1)
        
        sensing_conf = sensing_confs(capsule,:);
        
        % -- measurement file (current)
        measu_file = sprintf('measurement_conf%02d_fixed.dat',capsule);
        
        dir_.logs = dir_.TomographyLogs;
        
        % -- if output file does not exist
        %fname_out = [dir_.meas_capsule,measu_file{i}];
        visualize = 0;
        %if exist(fname_out, 'file') == 0                
            % -- collect integral measurements
            fprintf('Measurement:\n');
            fMeasurements( sensing_conf,...
                           measu_file,...
                           para_,...
                           dir_,...
                           visualize );
        %end
        fprintf('\n');

        %profile off;
        %profsave(profile('info'),[pwd,'/Profile']);
        %pause
            
        
    end
end




%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
% 
%                           RECONSTRUCTION - FIXED TOMOGRAPHY
% 
%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
if solve_tomography.recons_spp_fixed
    
    fprintf(1,['\n\n',...
           '*********************************************************************\n',...
           '                      SPP Fixed Reconstruction \n',...
           '*********************************************************************\n\n'])
    
    meas_files = 'measurement_conf*.dat*';
    dir_.logs = dir_.TomographyLogs;
    visualize = 0;
    
    [ M,...
      mean_map,...
      cell_coords_x,...
      cell_coords_y ] = fReconstruction( meas_files,...
                                         para_,...
                                         dir_,...
                                         visualize );

    save([dir_.TomographyResults,'reconstruction_tomography_fixed.mat'],...
        'M','mean_map','cell_coords_x','cell_coords_y');
end



%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
% 
%                           EVALUATION - FIXED TOMOGRAPHY
% 
%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
if solve_tomography.evaluation_spp_fixed
    
    fprintf(1,['\n\n',...
           '*********************************************************************\n',...
           '                      SPP Fixed Evaluations \n',...
           '*********************************************************************\n\n'])
    
    
    visualize = 0;
    
    recon_filename = 'reconstruction_tomography_fixed.mat';
    dir_.recon = dir_.TomographyResults;
    
    [ mse,...
      nearness,...
      ple,...
      md,...
      nae,...
      nk,...
      psnr,...
      sc,...
      mssim,...
      kld,...
      jsd,...
      d_eucl,...
      d_corr] = fEvaluation( recon_filename,...
                             para_,...
                             dir_,...
                             visualize )

    %save([dir_.results,'reconstruction_tomography_adaptive.mat'],...
    %    'M','cell_coords_x','cell_coords_y','num_cells_x','num_cells_y','mean_map');
end



%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
% 
%                           EVALUATION - FIXED TOMOGRAPHY (2)
% 
%¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
if solve_tomography.evaluation_spp_fixed2
    
    fprintf(1,['\n\n',...
           '*********************************************************************\n',...
           '                       SPP Evaluation - Fixed \n',...
           '*********************************************************************\n\n'])
       
    visualize = 0;
    recon_filename = 'reconstruction_tomography_fixed.mat';
    load([dir_.TomographyResults,'preprocess_maps.mat'],'map_env');
    dir_.recon = dir_.TomographyResults;
    [ nearness,sc,jsd ] = fEvaluation2( recon_filename,...
                                        map_env,...
                                        para_,...
                                        dir_,...
                                        visualize );
    save([dir_.TomographyEvaluation,'evaluation_fixed.mat'],...
        'nearness','sc','jsd');
end


end


