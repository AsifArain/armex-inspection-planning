function fOptimalHotspotGeometries2t( FoV,...
                                      para_,...
                                      dir_,...
                                      visualize )
                                            
%
%**********************************************************************
% Optimal sensing geometries for all the estimated hotspot in 2t-ARMEx
%**********************************************************************
%



%/////////////////////////////////
% -- preprocessing
%/////////////////////////////////
load([dir_.gdmplan_spp,'preprocess_maps.mat'],...
    'hotspotSEQ',...
    'InOutTSPAnglesMean',...
    'FocusTSPAngles',...
    'OBSenv',...
    'OBSconf',...
    'map_coverage',...
    'map_env',...
    'map_recon',...
    'SensorRange');


engagedConfs_ind = [];

for hc_num = 1:numel(hotspotSEQ)


    fprintf(1,'     *******************************************\n')
    fprintf(1,'          Optimal Geometry for Hotspot #%02d\n',hc_num)
    fprintf(1,'     *******************************************\n')



    % ith hotspot
    hc_ind = hotspotSEQ(hc_num);


    fprintf(1,'\n-- VDHc (2t-armex) \n')
    
    % preprocessing parameters:
    % --------------------------
    para_.A                                = 1;
    para_.D                                = 1;
    para_.GraphCnt                         = 8;  % graph connectivity (4/8).
    para_.TravCost                         = 10; % travelling cost (sec) for one meter travel.
    para_.PixSize                          = 1;  % original (map) pixel size (meters).
    para_.numFoVs                          = 360;  % nummber of elementray sensing action per cell.
    para_.AWM                              = 1;  % artificial world map (yes/no).
    para_.RWM                              = 0;  % real world map (yes/no).
    para_.MapFig                           = '';
    para_.MapTxt                           = [];
    para_.SensorDomainComputation          = 'UseEarlier'; % 'ComputeNew';
    para_.CoM                              = hc_ind;
    para_.startConf                        = 1;
    para_.innerRadius_m                    = 1; % min radius where sensing conf are not allowed.
    para_.AngularStepForDistanceFocusPoint = 10; % angular step to find distance focus point around hotspot
    %para_.NumOfCandConf                    = 200; % number of allowed cand conf.

    InOutTSPAng = InOutTSPAnglesMean(hc_num,:);
    FocusTSPAng = FocusTSPAngles(hc_num);
    
    [ oConfOrns,...
      ConfOrns,...
      SensorRange,...
      OBSenv,...
      OBSconf,...
      V,...
      oV,...
      wV,...
      Conf_DistOrnGainV,...
      confKept,...
      confRemoved,...
      cellKept,...
      cellRemoved,...
      FoVfaces,...
      map_candConf,...
      map_coverage,...
      refDistPoint,...
      conf_crossAngles,...
      Angles_FromHc2Conf,...
      D,...
      tPreprocess ] = fVDHc2t( FoV,...
                               OBSenv,...
                               OBSconf,...
                               SensorRange,...
                               map_coverage,...
                               engagedConfs_ind,...
                               map_recon,...
                               hc_ind,...
                               FocusTSPAng,...
                               para_,...
                               dir_,...
                               visualize );

    filename = sprintf('optimal_geometry_hc%02d_vd.mat',hc_num);
    save([dir_.gdmplan_spp,filename],...
         'oConfOrns',...
         'ConfOrns',...
         'SensorRange',...
         'OBSenv',...
         'OBSconf',...
         'V',...
         'oV',...
         'wV',...
         'Conf_DistOrnGainV',...
         'confKept',...
         'confRemoved',...
         'cellKept',...
         'cellRemoved',...
         'FoVfaces',...
         'map_candConf',...
         'map_coverage',...
         'refDistPoint',...
         'conf_crossAngles',...
         'Angles_FromHc2Conf',...
         'D',...
         'engagedConfs_ind',...
         'tPreprocess');


    %/////////////////////////////////////
    %   OPTIMIZATION FOR LOCAL SOLUTIONS
    %/////////////////////////////////////

    %-- initial number of conf to place
    NumOfAllowedConf = 2;
    %-- map quality improvement criteria
    MapQualityImprovmentCriteria = 1;
    %-- last ERQ
    %LastERQ = 0;
    %-- map quality
    thisERQ = 0;
    lastERQ = 0;

    % -- the desired ERQ is not achieved and the number of selected
    % conf are less or equal to a set number
    while ...        
            MapQualityImprovmentCriteria...
            &&...
            NumOfAllowedConf<=para_.maxConfToSelect_Hotspot_2t...
            &&...
            thisERQ<para_.desiredERQ2t

	%**************************************************
        % Preprocessing (Cross angles)
        %**************************************************
        fprintf(1,'\n-- XHc (2t-armex) \n')
        
        [ conf_crossAngles_G ] = fXHc2t( conf_crossAngles,...
                                         NumOfAllowedConf,...
                                         para_ );

        filename = sprintf('optimal_geometry_hc%02d_xvd.mat',hc_num);

        save([dir_.gdmplan_spp,filename],...
             'oConfOrns',...
             'ConfOrns',...
             'SensorRange',...
             'OBSenv',...
             'OBSconf',...
             'V',...
             'oV',...
             'wV',...
             'Conf_DistOrnGainV',...
             'confKept',...
             'confRemoved',...
             'cellKept',...
             'cellRemoved',...
             'FoVfaces',...
             'map_candConf',...
             'map_coverage',...
             'refDistPoint',...
             'conf_crossAngles',...
             'Angles_FromHc2Conf',...
             'conf_crossAngles_G',...
             'NumOfAllowedConf',...
             'engagedConfs_ind',...
             'D');

        %/////////////////////////////////
        % 	OPTIMIZATION
        %/////////////////////////////////
        hotspot_num = hc_num;
        strategy = para_.MissionStrategy;
        EXP_TITLE = para_.ExperimentTitle;
        sensing_system = para_.SensingSystem;
        alpha = para_.alpha;
        beta = para_.beta;
        gamma = para_.gamma;
        FilePath = dir_.gdmplan_spp;
        save('SPP_HOTSPOT_GEOMETRY_2t.mat',...
             'hotspot_num',...
             'EXP_TITLE',...
             'strategy',...
             'NumOfAllowedConf',...
             'alpha',...
             'beta',...
             'gamma',...
             'sensing_system',...
             'FilePath',...
             'strategy');

        PythonTime_start = tic;
        %system('python main_hotspot.py');
        %system('python optimization/mLocalSolutionsOptimization2t.py');
        system('python optimization/mOptimizationHotspotGeometry2t.py');

        tPythonTime = 1e-4*(round(toc(PythonTime_start)*1e4));
        fprintf(1,'--- Computation time (from Matlab): %0.4f sec \n',tPythonTime)





        %=====================================
        % 	SOLUTION QUALITY (ERG/ERQ)
        %=====================================
        filename = sprintf('optimal_geometry_hc%02d_spp.dat',hc_num);
        selectedConf = load([dir_.gdmplan_spp,filename]);
        selectedConf = round(selectedConf);

        %-- current ERG
        %-------------------------------
        [ thisERG ] = fCalculateERG( NumOfAllowedConf,...
                                     selectedConf,...
                                     wV,...
                                     D,...
                                     conf_crossAngles_G,...
                                     Conf_DistOrnGainV,...
                                     para_ );

        %-- current ERQ (map quality)
        %--------------------------------
        if     NumOfAllowedConf == 2
            thisERQ = para_.MapQuality2Conf*thisERG;
        elseif NumOfAllowedConf == 3
            thisERQ = para_.MapQuality3Conf*thisERG;
        elseif NumOfAllowedConf == 4
            thisERQ = para_.MapQuality4Conf*thisERG;
        elseif NumOfAllowedConf == 5
            thisERQ = para_.MapQuality5Conf*thisERG;
        end

        %-- display info
        %==============================================================
        fprintf('\nNumber of selected conf = %d\n',numel(find(selectedConf)));
        fprintf('ERG = %.4f\n',thisERG);
        fprintf('ERQ (Map Quality) = %.4f\n',thisERQ);
        %fprintf('\n');


        %--- SAVE SOLUTIONS
        %==============================================================
        %-- preprocess/cross angles solution
        filename_this = sprintf('optimal_geometry_hc%02d_xvd.mat',hc_num);
        filename_last = sprintf('optimal_geometry_hc%02d_xvd_LastSolution.mat',hc_num);
        solution_Xangles_this = [dir_.gdmplan_spp,filename_this];
        solution_Xangles_last = [dir_.gdmplan_spp,filename_last];

        %-- sensor placement solution
        filename_this = sprintf('optimal_geometry_hc%02d_spp.dat',hc_num);
        filename_last = sprintf('optimal_geometry_hc%02d_spp_LastSolution.dat',hc_num);
        solution_placement_this = [dir_.gdmplan_spp,filename_this];
        solution_placement_last = [dir_.gdmplan_spp,filename_last];
        
        
        %-- improvement condition
        %==============================================================
        if thisERQ > (lastERQ*(1+para_.minERQImprovement_2t))
            %disp('... going to improve the solution by adding a conf.') 
            %-- map quality for the next iteration
            lastERQ = thisERQ;        
            %-- map quality improvement criteria
            MapQualityImprovmentCriteria = 1;        
            % -- update number of conf for the next iteration
            NumOfAllowedConf = NumOfAllowedConf+1;
            % -- save solutions
            %LastSolution = ThisSolution;
            copyfile(solution_Xangles_this,solution_Xangles_last);
            copyfile(solution_placement_this,solution_placement_last);

        elseif thisERQ <= (lastERQ*(1+para_.minERQImprovement_2t))

            if NumOfAllowedConf > 2
                %disp('... going to retain the previous solution by removing a conf.') 
                %-- map quality improvement criteria
                MapQualityImprovmentCriteria = 0;                        
                % -- update number of conf for the next iteration
                NumOfAllowedConf = NumOfAllowedConf-1;
                % -- solution
                %ThisSolution = LastSolution;            
                copyfile(solution_Xangles_last,solution_Xangles_this);
                copyfile(solution_placement_last,solution_placement_this);

            elseif NumOfAllowedConf == 2 
                %disp('... going to retain this solution with no further improvement.') 
                %-- map quality improvement criteria
                MapQualityImprovmentCriteria = 0;
                % -- number of conf to select is the last iteration confs
                NumOfAllowedConf = NumOfAllowedConf-0;
                % -- solution selection
                %ThisSolution = ThisSolution;            
                %copyfile(solution_Xangles_this,solution_Xangles_this);
                %copyfile(solution_placement_this,solution_placement_this);
            end

        end
    end

    %-- update the current solution
    load(solution_Xangles_this);
    load(solution_placement_this)

    filename = sprintf('optimal_geometry_hc%02d_spp.dat',hc_num);
    selectedConf = load([dir_.gdmplan_spp,filename]);
    selectedConf = round(selectedConf);
    
    engagedConfs_ind = [engagedConfs_ind,confKept(selectedConf==1)];
    
    
    %-- final solution
    %==============================================================
    
    %-- final ERG
    %----------------------------
    [ finalERG ] = fCalculateERG( NumOfAllowedConf,...
                                  selectedConf,...
                                  wV,...
                                  D,...
                                  conf_crossAngles_G,...
                                  Conf_DistOrnGainV,...
                                  para_ );

    %-- final ERQ
    %----------------------------
    if     NumOfAllowedConf == 2
        finalERQ = para_.MapQuality2Conf*finalERG;
    elseif NumOfAllowedConf == 3
        finalERQ = para_.MapQuality3Conf*finalERG;
    elseif NumOfAllowedConf == 4
        finalERQ = para_.MapQuality4Conf*finalERG;
    elseif NumOfAllowedConf == 5
        finalERQ = para_.MapQuality5Conf*finalERG;
    end
    
    %-- print
    %------------------------------
    fprintf('\n-- Final solution for hc #%d\n',hc_num);    
    fprintf('---- Number of selected conf = %d\n',numel(find(selectedConf)));
    fprintf('---- ERG = %.4f\n',finalERG);
    fprintf('---- ERQ (Map Quality) = %.4f\n',finalERQ);
    %fprintf('\n');

    fprintf('\n  -- optimization completed --\n\n');
    
end


fprintf('-- optimal geometries for all the hotspot are computed --\n\n');


end

                                            