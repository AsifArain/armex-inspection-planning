function [ hc_num,...
           hc_nums_local_this,...
           map_coverage,...
           refDistPoint ] = fOptimalHotspotGeometries1t( hc_current_sub,...
                                                         hc_num,...
                                                         hc_block_num,...
                                                         FoV,...
                                                         map_env,...
                                                         OBSenv,...
                                                         OBSconf,...
                                                         SensorRange,...
                                                         map_gd_current,...
                                                         confs_executed_hc,...
                                                         para_,...
                                                         dir_ )


%
%**********************************************************************
% Optimal sensing geometries for all the estimated hotspot in 1t-ARMEx
%**********************************************************************
%


fprintf('--> hc block num: %02d\n',hc_block_num);
hc_nums_local_this = [];



visualize = 0;

%-- engaged confs (not to be used as candidate confs)
engagedConfs_ind = [];

for i = 1:size(hc_current_sub,1)
    
    
    fprintf(1,'     *******************************************\n')
    fprintf(1,'          Optimal Geometry for Hotspot #%02d\n',hc_num)
    fprintf(1,'     *******************************************\n')
            
    hc_this_sub = hc_current_sub(i,:);
    hc_nums_local_this = [hc_nums_local_this;hc_num];
        
    %*********************************************************
    %   Preprocessing (Sensing coverage and traveling dist)
    %*********************************************************
    fprintf(1,'\n-- VDHc (1t-armex) \n')
    
    % preprocessing parameters:
    % --------------------------
    para_.A                                = 1;
    para_.D                                = 1;
    para_.GraphCnt                         = 8;  % graph connectivity (4/8).
    para_.TravCost                         = 10; % travelling cost (sec) for one meter travel.
    para_.PixSize                          = 1;  % original (map) pixel size (meters).
    para_.numFoVs                          = 360;  % nummber of elementray sensing action per cell.
    para_.AWM                              = 1;  % artificial world map (yes/no).
    para_.RWM                              = 0;  % real world map (yes/no).
    para_.MapFig                           = '';
    para_.MapTxt                           = [];
    para_.SensorDomainComputation          = 'UseEarlier'; % 'ComputeNew';
    para_.startConf                        = 1;
    para_.innerRadius_m                    = 1; % min radius where sensing conf are not allowed.
    para_.AngularStepForDistanceFocusPoint = 10; % angular step to find distance focus point around hotspot
    
    %profile on;    

    [  oConfOrns,...
       ConfOrns,...
       SensorRange,...
       OBSenv,...
       OBSconf,...
       V,...
       oV,...
       wV,...
       Conf_DistOrnGainV,...
       executedConfsHot_num,...
       confKept,...
       confRemoved,...
       cellKept,...
       cellRemoved,...
       FoVfaces,...
       map_candConf,...
       map_coverage,...
       refDistPoint,...
       D,...
       tPreprocess ] = fVDHc1t( FoV,...
                                 OBSenv,...
                                 OBSconf,...
                                 SensorRange,...
                                 engagedConfs_ind,...
                                 map_gd_current,...
                                 confs_executed_hc,...
                                 hc_this_sub,...
                                 para_,...
                                 dir_,...
                                 visualize );
                        
    %profile_name = sprintf('tmp_profile')
    %mkdir(profile_name)
    %profile off;
    %profsave(profile('info'),profile_name);            
    %pause
    
    filename = sprintf('optimal_geometry_hc%02d_vd.mat',hc_num);
    save([dir_.sppgdm,filename],...
         'oConfOrns',...
         'ConfOrns',...
         'SensorRange',...
         'OBSenv',...
         'OBSconf',...
         'V',...
         'oV',...
         'wV',...
         'Conf_DistOrnGainV',...
         'executedConfsHot_num',...
         'confKept',...
         'confRemoved',...
         'cellKept',...
         'cellRemoved',...
         'FoVfaces',...
         'map_candConf',...
         'map_coverage',...
         'refDistPoint',...
         'D',...
         'engagedConfs_ind',...
         'FoV',...
         'map_gd_current',...
         'confs_executed_hc',...
         'hc_this_sub',...
         'tPreprocess');


    %/////////////////////////////////////
    %   OPTIMIZATION FOR LOCAL SOLUTIONS
    %/////////////////////////////////////

    %-- initial number of conf to place
    NumOfAllowedConf = 2;
    %-- map quality improvement criteria
    MapQualityImprovmentCriteria = 1;
    %-- last ERQ
    %LastERQ = 0;
    %-- map quality
    thisERQ = 0;
    lastERQ = 0;

    % -- the desired ERQ is not achieved and the number of selected
    % conf are less or equal to a set number
    while ...        
            MapQualityImprovmentCriteria...
            &&...
            NumOfAllowedConf<=para_.maxConfToSelect_Hotspot_1t...
            &&...
            thisERQ<para_.desiredERQ1t
        
        %**************************************************
        % Preprocessing (Cross angles)
        %**************************************************
        fprintf(1,'\n-- XHc (1t-armex) \n')
        
        [ conf_crossAngles,...
          conf_crossAngles_G,...
          Angles_FromHc2Conf ] = fXHc1t( hc_this_sub,...
                                         map_env,...
                                         confKept,...
                                         NumOfAllowedConf,...
                                         para_ );

        filename = sprintf('optimal_geometry_hc%02d_xvd.mat',hc_num);
        save([dir_.sppgdm,filename],...
            'oConfOrns',...
            'ConfOrns',...
            'SensorRange',...
            'OBSenv',...
            'OBSconf',...
            'V',...
            'oV',...
            'wV',...
            'Conf_DistOrnGainV',...
            'executedConfsHot_num',...
            'confKept',...
            'confRemoved',...
            'cellKept',...
            'cellRemoved',...
            'FoVfaces',...
            'map_candConf',...
            'map_coverage',...
            'refDistPoint',...
            'D',...
            'engagedConfs_ind',...             
            'Angles_FromHc2Conf',...
            'conf_crossAngles',...
            'conf_crossAngles_G',...
            'executedConfsHot_num',...
            'NumOfAllowedConf');                                       
        
        
        %***********************************
        % 	OPTIMIZATION
        %***********************************
            
        EXP_TITLE = para_.ExperimentTitle;
        strategy = para_.MissionStrategy;
        hotspot_num = hc_num;        
        sensing_system = para_.SensingSystem;
        alpha = para_.alpha;
        beta = para_.beta;
        gamma = para_.gamma;
        FilePath = dir_.sppgdm;
        save('DATA_SPP_HOTSPOT_GEOMETRY_1t.mat',...
            'hotspot_num',...
            'EXP_TITLE',...
            'NumOfAllowedConf',...
            'alpha',...
            'beta',...
            'gamma',...
            'sensing_system',...
            'FilePath',...
            'strategy');

        % -- solve optimization problem
        PythonTime_start = tic;
        %system('python main_1StepExLocalPlan.py');
        system('python optimization/mOptimizationHotspotGeometry1t.py');
        
        tPythonTime = 1e-4*(round(toc(PythonTime_start)*1e4));
        fprintf(1,'--- Computation time (from Matlab): %0.4f sec \n',tPythonTime)


        %****************************************
        % 	SOLUTION QUALITY (ERG/ERQ) TEST
        %****************************************
        filename = sprintf('optimal_geometry_hc%02d_spp.dat',hc_num);
        reselectedConf = load([dir_.sppgdm,filename]);
        reselectedConf = round(reselectedConf);

        %-- current ERG
        %-------------------------------
        [ thisERG ] = fCalculateERG( NumOfAllowedConf,...
                                     reselectedConf,...
                                     wV,...
                                     D,...
                                     conf_crossAngles_G,...
                                     Conf_DistOrnGainV,...
                                     para_ );
                                
        %-- current ERQ (map quality)
        %-------------------------------
        if     NumOfAllowedConf == 2
            thisERQ = para_.MapQuality2Conf*thisERG;
        elseif NumOfAllowedConf == 3
            thisERQ = para_.MapQuality3Conf*thisERG;
        elseif NumOfAllowedConf == 4
            thisERQ = para_.MapQuality4Conf*thisERG;
        elseif NumOfAllowedConf == 5
            thisERQ = para_.MapQuality5Conf*thisERG;
        end

        %-- display info
        %==============================================================
        fprintf('\nNumber of selected confs = %d\n',numel(find(reselectedConf)));
        fprintf('ERG = %.4f\n',thisERG);
        fprintf('ERQ (Map Quality) = %.4f\n',thisERQ);
        %fprintf('\n');


        %--- SAVE SOLUTIONS
        %==============================================================
        %-- preprocess/cross angles solution
        filename_this = sprintf('optimal_geometry_hc%02d_xvd.mat',hc_num);
        filename_last = sprintf('optimal_geometry_hc%02d_xvd_LastSolution.mat',hc_num);
        solution_Xangles_this = [dir_.sppgdm,filename_this];
        solution_Xangles_last = [dir_.sppgdm,filename_last];

        %-- sensor placement solution
        filename_this = sprintf('optimal_geometry_hc%02d_spp.dat',hc_num);
        filename_last = sprintf('optimal_geometry_hc%02d_spp_LastSolution.dat',hc_num);
        solution_placement_this = [dir_.sppgdm,filename_this];
        solution_placement_last = [dir_.sppgdm,filename_last];

        
        %-- improvement condition
        %==============================================================
        if thisERQ > (lastERQ*(1+para_.minERQImprovement_1t))
            %disp('... going to improve the solution by adding a conf.') 
            %-- map quality for the next iteration
            lastERQ = thisERQ;        
            %-- map quality improvement criteria
            MapQualityImprovmentCriteria = 1;        
            % -- update number of conf for the next iteration
            NumOfAllowedConf = NumOfAllowedConf+1;
            % -- save solutions
            %LastSolution = ThisSolution;
            copyfile(solution_Xangles_this,solution_Xangles_last);
            copyfile(solution_placement_this,solution_placement_last);

        elseif thisERQ <= (lastERQ*(1+para_.minERQImprovement_1t))

            if NumOfAllowedConf > 2
                disp('... going to retain the previous solution by removing a conf.') 
                %-- map quality improvement criteria
                MapQualityImprovmentCriteria = 0;                        
                % -- update number of conf for the next iteration
                NumOfAllowedConf = NumOfAllowedConf-1;
                % -- solution
                %ThisSolution = LastSolution;            
                copyfile(solution_Xangles_last,solution_Xangles_this);
                copyfile(solution_placement_last,solution_placement_this);

            elseif NumOfAllowedConf == 2 
                disp('... going to retain this solution with no further improvement.') 
                %-- map quality improvement criteria
                MapQualityImprovmentCriteria = 0;
                % -- number of conf to select is the last iteration confs
                NumOfAllowedConf = NumOfAllowedConf-0;
                % -- solution selection
                %ThisSolution = ThisSolution;            
                %copyfile(solution_Xangles_this,solution_Xangles_this);
                %copyfile(solution_placement_this,solution_placement_this);
            end

        end
    end
    
    
    %-- update the current solution
    load(solution_Xangles_this);
    load(solution_placement_this)

    filename = sprintf('optimal_geometry_hc%02d_spp.dat',hc_num);
    reselectedConf = load([dir_.sppgdm,filename]);
    reselectedConf = round(reselectedConf);
    
    
    engagedConfs_ind = [engagedConfs_ind,confKept(reselectedConf==1)];

    %*********************************************
    %   FINAL SOLUTION
    %*********************************************
    
    %-- final ERG
    %----------------------------
    [ finalERG ] = fCalculateERG( NumOfAllowedConf,...
                                  reselectedConf,...
                                  wV,...
                                  D,...
                                  conf_crossAngles_G,...
                                  Conf_DistOrnGainV,...
                                  para_ );

    %-- final ERQ
    %----------------------------
    if     NumOfAllowedConf == 2
        finalERQ = para_.MapQuality2Conf*finalERG;
    elseif NumOfAllowedConf == 3
        finalERQ = para_.MapQuality3Conf*finalERG;
    elseif NumOfAllowedConf == 4
        finalERQ = para_.MapQuality4Conf*finalERG;
    elseif NumOfAllowedConf == 5
        finalERQ = para_.MapQuality5Conf*finalERG;
    end
    
    %-- print
    %------------------------------
    fprintf('\n-- Final solution for hc #%d\n',hc_num);    
    fprintf('---- Number of selected conf = %d\n',numel(find(reselectedConf)));
    fprintf('---- ERG = %.4f\n',finalERG);
    fprintf('---- ERQ (Map Quality) = %.4f\n',finalERQ);
    
    disp(['--- Selected confs ind: ',num2str(confKept(reselectedConf==1))]);    
    fprintf('\n  -- optimization completed --\n\n');
        
    hc_num = hc_num+1;
    
end

fprintf('-- optimal geometries for all the hotspot are computed --\n\n');
    
end