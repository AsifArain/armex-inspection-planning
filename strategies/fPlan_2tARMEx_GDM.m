function fPlan_2tARMEx_GDM( solve_gdm,para_,dir_ ) 
%
%=====================================================================
%           2t-ARMEx - GAS DISTRIBUTION MAPPING
%=====================================================================
%



fprintf(1,['\n\n',...
'*********************************************************************\n\n',...
'                   GAS DISTRIBUTION MAPPING PLANNING \n\n',...
'*********************************************************************\n\n'])



%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       MAPS AND RELATED STUFF
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[ map_env,...
  map_conf,...
  origin_env,...
  origin_conf,...
  cellsize_env,...
  cellsize_conf,...
  cellsize_org ] = fMapStuff( para_,dir_ );



%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       SENSING PARAMETERS
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
FoV = para_.FieldOfViewDEG;
SensorRange.m = para_.SensingRangeM;
SensorRange.cell = SensorRange.m/cellsize_env;



%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       PREPROCESS: MAPS AND GLOBAL TSP
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_gdm.preprocess_maps
    
    
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '       PREPROCESSING MAPS \n',...
    '*********************************************\n\n'])
    
    visualize = 1;

    if para_.ReconDetectionArtificial
        mean_map = [];
        cell_coords_x = [];
        cell_coords_y = [];
    else
        load([dir_.gdplan_recon,'coarse_gdm.mat']);
    end

    % preprocessing parametes:
    % --------------------------
    para_.GraphCnt                        = 8; % graph connectivity (4/8).
    para_.Ct                              = 0; % travelling cost matrix (yes/no).
    para_.TravCost                        = 10; % travelling cost (sec) for one meter travel.
    para_.numFoVs                         = 8; % nummber of elementray sensing action per cell.
    para_.A                               = 0; % generate connectivity matrix A (yes/no).
    para_.AWM                             = 0; % artificial world map (yes/no).
    %para_.num_of_artificial_hotspots      = 25;
    para_.do_nTCell                       = 0;
    %para_.nTLength                        = 3; % non traversable area around an obstacle (meters).
    %para_.gray2binImageThreshold          = 0.98; 
    %para_.highConcentrationThreshold_PPM  = 500;%2500; %5000; 
    %para_.radiusFreeCell_m                = 2; % radius of the circle to look for free cell if (centroid) hotspot is occupied cell.
    para_.centroid_dist_m                 = 1.5;%3.0;%2.5;%1.5; % distance to look for centroid within
    para_.NumOfCellsForInOutAnglesTSP     = 5; % number of cells considered for entrance and exit angles at each hotspot
    
    para_.TheCoarseMapIsFrom              = 'SimulatedMeasurement';
    %para_.TheCoarseMapIsFrom              = 'RobotMeasurement';

    % tsp parameters:
    % ------------------
    para_.TravCost    = 10; %ParamPreprocess.TravCost;
    para_.ConfOBS     = 1;
    para_.EoTinAstar  = 0;
    
    
    [ map_env,...
      map_recon,...
      map_coverage,...
      OBSenv,...
      OBSconf,...
      o,...
      E,...
      T,...
      hotspotSEQ,...
      InOutTSPAnglesAll,...
      InOutTSPAnglesMean,...
      FocusTSPAngles,...
      FoVfaces,...
      SensorRange,...
      tPreprocess ] = fPreprocessMap( FoV,...
                                      SensorRange,...
                                      cell_coords_x,...
                                      cell_coords_y,...
                                      para_,...
                                      dir_,...
                                      visualize );

    save([dir_.gdmplan_spp,'preprocess_maps.mat'],...
        'map_env',...
        'map_recon',...
        'map_coverage',...
        'OBSenv',...
        'OBSconf',...
        'o',...
        'E',...
        'T',...
        'hotspotSEQ',...
        'InOutTSPAnglesAll',...
        'InOutTSPAnglesMean',...
        'FocusTSPAngles',...
        'FoVfaces',...
        'SensorRange',...
        'tPreprocess');
    
    disp('-- preprocess map saved')
    
    
    thisfile = sprintf('hotspots.dat');
    fileID = fopen([dir_.gdmplan_hotspots,thisfile],'wt'); fclose(fileID);
    dlmwrite([dir_.gdmplan_hotspots,thisfile],hotspotSEQ,'-append','delimiter',' ');
    fileID = fopen([dir_.gdmplan_hotspots,thisfile],'a'); fclose(fileID);
    
end




%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       OPTIMAL SENSING GEOMETRIES FOR HOTSPOTS
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_gdm.optimal_hotspot_geometries
    
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '           OPTIMAL HOTSPOT GEOMETRIES \n',...
    '*********************************************\n\n'])
    visualize = 0;
    
    fOptimalHotspotGeometries2t( FoV,...
                                 para_,...
                                 dir_,...
                                 visualize )
end
    


%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       FUSION OF THE OPTIMAL GEOMETRIES FOR HOTSPOTS
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_gdm.fusion_optimal_geometries
       
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '       FUSION OF HOTSPOT GEOMETRIES \n',...
    '*********************************************\n\n'])
    visualize = 0;
    
    load([dir_.gdmplan_spp,'preprocess_maps.mat'],'SensorRange');
    
    % preprocess parameters:
    % --------------------------
    % number of elementray sensing action per cell.
    para_.numFoVs = 360; 
    para_.SensorDomainComputation = 'UseEarlier'; % 'ComputeNew'
    % circular area for the candidate conf around redundant confs
    para_.candConfRadiusForRedConfs_m = 1.5*SensorRange.cell; 
    % min radius where sensing conf are not allowed.
    para_.innerRadius_m = 1; 
    % number of allowed cand conf.
    %para_.NumOfCandConf = 200; 
    % min distance to check redundant confs.
    para_.DistanceForRedundantConfs_m = 2*para_.SensingRangeM; %3; 
            
    [ tspConf,...
      refPointDist,...
      selectedConfFusion_ioh,...
      tFusion ] = fFusionHotspotGeometries2t( FoV,...
                                              SensorRange,...
                                              cellsize_env,...
                                              dir_,...
                                              para_,...
                                              visualize );
    
    save([dir_.gdmplan_spp,'spp_fusion.mat'],...
        'tspConf',...
        'refPointDist',...
        'selectedConfFusion_ioh',...
        'tFusion');
end


%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       TRAVELING SALESMAN PROBLEM
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_gdm.tsp_spp
    
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '       SORTING GDM CONF (TSP) \n',...
    '*********************************************\n\n'])
        
    load([dir_.gdmplan_spp,'preprocess_maps.mat'],...
        'o','E','T','FoVfaces','map_env','OBSenv');
    load([dir_.gdmplan_spp,'spp_fusion.mat'],'tspConf','selectedConfFusion_ioh');
    
    Conf = zeros(numel(map_env)*FoVfaces.num,1);
    Conf(tspConf) = 1;

    %**************************************************
    % TSP
    %**************************************************

    % {
    % conf vector for tsp.
    ConfTSP = Conf';
    
    f = FoVfaces.num;
    

    % robot start conf.    
    robotStartPosition_ind = sub2ind(size(map_env),origin_conf(1),...
                                                   origin_conf(2));
    robotStartConf_ind = ((robotStartPosition_ind-1)*f)+1;
    ConfTSP(robotStartConf_ind) = 1;

    % removing conf on occupied cells
    % --------------------------------

    % obs-conf nums
    confOBS = zeros(numel(OBSenv.ind)*f,1);
    for hc_num = 1:numel(OBSenv.ind)
        confOBS(((hc_num-1)*f)+1:((hc_num-1)*f)+f) =...
            (((OBSenv.ind(hc_num)-1)*f)+1):(((OBSenv.ind(hc_num)-1)*f)+f);
    end
    ConfTSP(:,confOBS)  = [];
    %size(ConfTSP)

    ConfTSP = ConfTSP';
    %size(ConfTSP)


    % TSP PARAMETERS
    % --------------
    para_.TravCost   = 10; %ParamPreprocess.TravCost;
    para_.ConfOBS    = 1;
    para_.EoTinAstar = 1; %0; 1 for simplified path A*, 0 for complex path A*

    %{
    [ tRoute,...
      TRoute,...
      tCost,...
      dmatTSP,...
      PredTSP,...
      tTSP ] = fTSP( o,...
                     FoVfaces,...
                     ConfTSP,...
                     E,...
                     T,...
                     map_env,...
                     OBS,...
                     para_ );
    %}
    
    [ tRoute,...
      tCost,...
      tTSP ] = fTSP2( o,...
                      FoVfaces,...
                      ConfTSP,...
                      E,...
                      T,...
                      map_env,...
                      OBSenv,...
                      para_ );

    % traveling route with sequence starting from initial position
    tRouteOrderedWRTStart = tRoute(1:end-1,:);
    tRouteOrderedWRTStart = circshift(tRouteOrderedWRTStart,numel(tRouteOrderedWRTStart)-...
        find(tRouteOrderedWRTStart==robotStartConf_ind)+1);

    % conf sequence number in the order of conf vector index (start position is not a conf)
    [~,confSequenceNum,~] = intersect(tRouteOrderedWRTStart,find(Conf));

    % since start position is not a conf,
    confSequenceNum = confSequenceNum-1;

    save([dir_.gdmplan_spp,'tsp_spp_gdm.mat'],...
        'tRoute',...
        'tCost',...
        'tTSP',...
        'confSequenceNum',...
        'tRouteOrderedWRTStart');
    
    disp('-- TSP SPP Tomography done.')

end



%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       MEASUREMENTS COLLECTION
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_gdm.measurements == 1
           
    
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '       MEASUREMENTS COLLECTION \n',...
    '*********************************************\n\n'])
    visualize = 0;
    
    %===================================
    % load data
    %===================================
    % -- preprocessing
    load([dir_.gdmplan_spp,'preprocess_maps.mat'],...
        'hotspotSEQ',...    
        'OBSenv',...
        'OBSconf',...
        'map_coverage',...
        'map_env',...
        'SensorRange');
    % -- fusion
    load([dir_.gdmplan_spp,'spp_fusion.mat'],'refPointDist','selectedConfFusion_ioh')
    % -- tsp
    load([dir_.gdmplan_spp,'tsp_spp_gdm.mat'],'confSequenceNum');
    
    
    %-- plan type
    %para_.PlanType = 'two-step-exploration-tomography-fixed';
    para_.PlanType = '2t-armex-gdm';
    dir_.ROSLogsThis = sprintf('%s%s/',dir_.ROSLogs,para_.PlanType);
    dir_.logs = dir_.gdmplan_logs;
    
    
    %*******************************
    %   Hcs to publish
    %*******************************    
    [hcs_r,hcs_c] = ind2sub(size(map_env),hotspotSEQ);
    hcs_list_sub = [hcs_r,hcs_c];
    
    switch para_.SensingSystem
        case 'robot-sampling'
            %-- create hcs file, if not already exists
            if exist([dir_.ROSLogsThis,para_.RobotHcsFileName],'file') == 0    
                fileID = fopen([dir_.ROSLogsThis,para_.RobotHcsFileName],'wt'); 
                fclose(fileID);
            end
            %-- write hcs file
            dlmwrite([dir_.ROSLogsThis,para_.RobotHcsFileName],...
                     hcs_list_sub,'delimiter',' ');
            fileID = fopen([dir_.ROSLogsThis,para_.RobotHcsFileName],'a'); 
            fclose(fileID);

            %-- copy
            thisFile = ([dir_.ROSLogsThis,para_.RobotHcsFileName]);
            thatFile = ([dir_.logs,para_.RobotHcsFileName]);
            syncCommand = sprintf('rsync -raz %s %s',thisFile,thatFile);
            system(syncCommand);
            
        case 'simulated-sampling'
            % do nothing
    end
    %----------------------------------------------
    
    
    %===================================
    % executable confs
    %===================================
    
    [sensing_confs] = fExecutableConfsGDM2t( selectedConfFusion_ioh,...
                                             confSequenceNum,...
                                             SensorRange,...
                                             map_env,...
                                             FoV,...
                                             dir_,...
                                             para_ );
    
    %===================================
    % execute the confs
    %===================================
                                             
    switch para_.SensingSystem
        
            %======================================
        case 'robot-sampling'
            %======================================
                       
            sensing_confs = sensing_confs(:,1:3);
            conf_sequence_num = size(sensing_confs,1);
            
            fRobotMeasurement( sensing_confs,...
                               conf_sequence_num,...
                               dir_,...
                               para_ );

            %======================================
        case 'simulated-sampling'
            %======================================
            
            filename = 'executed_confs_final.txt';             
            confs_executed = sensing_confs(:,1:6);
            confs_executed(:,7) = 1;            
            fileID = fopen([dir_.gdmplan,filename],'wt'); fclose(fileID);
            % -- write integral concentration data to the file
            dlmwrite([dir_.gdmplan,filename],confs_executed,...
                'delimiter',' ','precision','%06.2f');
            fileID = fopen([dir_.gdmplan,filename],'a'); fclose(fileID);
            %pause
            
            % -- for all the conf
            for i = 1:size(sensing_confs,1)

                %-- this conf
                sensing_conf = sensing_confs(i,:);

                %-- measurement file name
                measu_file = sprintf('measurement_conf%02d.dat',i);
                
                %-- measurement
                fprintf('--> Conf# %02d to execute....\n',i);
                
                fSimulatedMeasurement( sensing_conf,...
                                       measu_file,...
                                       map_env,...
                                       para_,...
                                       dir_,...
                                       visualize );
                                   
            end
    end
end



%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       ACCURATE GDM
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_gdm.recons
        
    
    
    fprintf(1,['\n\n',...
    '****************************************************\n',...
    '                  ACCURATE GDM \n',...
    '****************************************************\n\n']);
       
    dir_.logs  = dir_.gdmplan_logs; 
    dir_.Recon = dir_.gdmplan_recon;
    visualize = 0;
    
    [ M,...
      mean_map,...
      cell_coords_x,...
      cell_coords_y ] = fReconstructionFixed( para_,...
                                              dir_,...
                                              visualize );
                                               
    save([dir_.gdmplan_recon,'accurate_gdm.mat'],...
        'M','mean_map','cell_coords_x','cell_coords_y');
    
    
    
    
%     fprintf(1,['\n\n',...
%     '*********************************************\n',...
%     '     RECONSTRUCTION FOR ACCURATE GDM \n',...
%     '*********************************************\n\n'])
%     %meas_files = 'measurement_conf*_fixed.dat*';    
%     dir_.MeasurementLogs = dir_.gdmplan_logs;
%     dir_.Recon = dir_.gdmplan_recon;    
%     
%     %-- plan type
%     para_.PlanType = 'two-step-exploration-tomography-fixed';
%     dir_.ROSLogsThis = sprintf('%s%s/',dir_.ROSLogs,para_.PlanType);
%     dir_.logs = dir_.TomographyLogsFix;
%     
%     visualize = 0;
% 
%     [ M,...
%       mean_map,...
%       cell_coords_x,...
%       cell_coords_y ] = fReconstructionFixed( para_,...
%                                               dir_,...
%                                               visualize );
%                                           
%     save([dir_.TomographyReconFix,'reconstruction.mat'],...
%         'M','mean_map','cell_coords_x','cell_coords_y');
end


%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       EVALUATION - TYPE 1
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_gdm.evaluation
    
    
    fprintf(1,['\n\n',...
    '****************************************************\n',...
    '                  EVALUATION TPYE 1 \n',...
    '****************************************************\n\n']);
    
    visualize = 0;
    
    %recon_filename = 'reconstruction_tomography_fixed.mat';
    recon_filename = 'reconstruction.mat';
    dir_.recon = dir_.TomographyResults;
    
    [ mse,...
      nearness,...
      ple,...
      md,...
      nae,...
      nk,...
      psnr,...
      sc,...
      mssim,...
      kld,...
      jsd,...
      d_eucl,...
      d_corr] = fEvaluation( recon_filename,...
                             para_,...
                             dir_,...
                             visualize );

    %save([dir_.results,'reconstruction_tomography_adaptive.mat'],...
    %    'M','cell_coords_x','cell_coords_y','num_cells_x','num_cells_y','mean_map');
end


%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       EVALUATION - TYPE 2
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_gdm.evaluation2
    
    fprintf(1,['\n\n',...
    '****************************************************\n',...
    '                  EVALUATION TPYE 2 \n',...
    '****************************************************\n\n']);
       
    visualize = 0;
    recon_filename = 'accurate_gdm.mat';
    load([dir_.gdmplan_spp,'preprocess_maps.mat'],'map_env');
    dir_.recon = dir_.gdmplan_recon;
    [ nearness,sc,jsd ] = fEvaluation2( recon_filename,...
                                        map_env,...
                                        para_,...
                                        dir_,...
                                        visualize );
    save([dir_.gdmplan_evaluation,'evaluation2.mat'],...
        'nearness','sc','jsd');
    
    
end




%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       EVALUATION - TYPE 3
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_gdm.evaluation3
           
    fprintf(1,['\n\n',...
    '****************************************************\n',...
    '                  EVALUATION TPYE 3 \n',...
    '****************************************************\n\n']);
    
    visualize = 1;
    recon_filename = 'accurate_gdm.mat';
    
    dir_
    
    dir_.ROSLogsThis = dir_.ROSLogs
    
    dir_.recon = dir_.gdmplan_recon;
    
    
    [ sc_true,...
           sc_estimated,...
           true_positives,...
           false_positives,...
           num_of_true_positives,...
           num_of_false_positives,...
           true_positives_dist,...
           false_positives_dist,...
           dist_estimatedSources2trueSources,...
           precision,...
           recall,...
           f_measure ] = fEvaluation3old( recon_filename,...
                                       map_env,...
                                       cellsize_env,...
                                       para_,...
                                       dir_,...
                                       visualize )
    pause
        
    
    [ true_positives,...
      false_positives,...
      num_of_true_positives,...
      num_of_false_positives,...
      precision,...
      recall,...
      f_measure ] = fEvaluation3( recon_filename,...
                                  map_env,...
                                  cellsize_env,...
                                  para_,...
                                  dir_ )
                                   
    save([dir_.gdmplan_evaluation,'evaluation3.mat'],...
        'true_positives',...
        'false_positives',...      
        'num_of_true_positives',...
        'num_of_false_positives',...
        'precision',...
        'recall',...
        'f_measure');

    % visualize = 0;
    % %recon_filename = 'reconstruction_tomography_fixed.mat';
    % recon_filename = 'accurate_gdm.mat';
    % 
    % %load([dir_.TomographyMaps,'preprocess_maps.mat'],'OBSenv');
    % dir_.recon = dir_.gdmplan_recon;
    % %dir_.recon
    % %pause
    % 
    % %-- plan type
    % para_.PlanType = 'two-step-exploration-tomography-fixed';
    % dir_.ROSLogsThis = sprintf('%s%s/',dir_.ROSLogs,para_.PlanType);
    % dir_.logs = dir_.TomographyLogsFix;
    % 
    % dir_.Solutions = dir_.TomographyReconFix;
    % dir_.Evaluation = dir_.TomographyEvaluation;
    % 
    % [ sc_true,...
    %   sc_estimated,...
    %   true_positives,...
    %   false_positives,...
    %   num_of_true_positives,...
    %   num_of_false_positives,...
    %   true_positives_dist,...
    %   false_positives_dist,...
    %   dist_estimatedSources2trueSources,...
    %   precision,...
    %   recall,...
    %   f_measure ] = fEvaluation3( recon_filename,...
    %                               map_env,...
    %                               cellsize_env,...
    %                               para_,...
    %                               dir_,...
    %                               visualize )
    % 
    % save([dir_.gdmplan_evaluation,'evaluation3.mat'],...
    %     'sc_true',...
    %     'sc_estimated',...
    %     'true_positives',...
    %     'false_positives',...      
    %     'num_of_true_positives',...
    %     'num_of_false_positives',...
    %     'true_positives_dist',...
    %     'false_positives_dist',...
    %     'dist_estimatedSources2trueSources',...
    %     'precision',...
    %     'recall',...
    %     'f_measure');
    
    
end


%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       SENSING COVERAGE
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_gdm.coverage == 1     
    
    fprintf(1,['\n\n',...
           '*********************************************\n',...
           '       SPP TOMOGRAPHY COVERAGE - FIXED \n',...
           '*********************************************\n\n'])
       
    %-- plan type
    para_.PlanType = 'two-step-exploration-tomography-fixed';
    dir_.ROSLogsThis = sprintf('%s%s/',dir_.ROSLogs,para_.PlanType);
    dir_.logs = dir_.TomographyLogsFix;
    
    para_.ConfType = 'Planned'; %'Executed'
        
    sensingCoverage = fCalculateCoverage( map_env,SensorRange,FoV,para_,dir_ )
    save([dir_.TomographyResults,'sensing_coverage.mat'],'sensingCoverage');
    
end


%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       TRAVELLING DISTANCE AND PATH
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_gdm.traveling_path_dist == 1 
    
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '         SPP TRAVELING PATH/DISTANCE \n',...
    '*********************************************\n\n'])
   
    %-- plan type
    %para_.PlanType = 'two-step-exploration-tomography-fixed';
    %dir_.ROSLogsThis = sprintf('%s%s/',dir_.ROSLogs,para_.PlanType);
    %dir_.logs = dir_.TomographyLogsFix;
    dir_.str = dir_.gdmplan;
    
    para_.ConfType = 'Planned'; %'Executed'
    
    [ travelingPath,travelingDist ] = fTravelingPathDist( map_env,para_,dir_ );
    save([dir_.gdmplan,'traveling_path_dist.mat'],...
        'travelingPath','travelingDist');
    
end



% close all;

diary save
diary off


end