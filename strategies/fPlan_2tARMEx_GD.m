function fPlan_2tARMEx_GD( solve_detection,para_,dir_ )
%
%=====================================================================
%       COMPUTES SENSING COVERAGE PLAN FOR GAS DETECTION
%=====================================================================
%

% -----------------------------------------------------------------------------------
% 


fprintf(1,['\n\n',...
'*********************************************************************\n\n',...
'                    SOLVE GAS DETECTION \n\n',...
'*********************************************************************\n\n'])


%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       PLAN TYPE ETC
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%-- plan type
para_.PlanType = '2t-armex-detection';
dir_.ROSLogsThis = sprintf('%s%s/',dir_.ROSLogs,para_.PlanType);
dir_.logs = dir_.gdplan_logs;



       
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       MAP AND RELATED
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[ map_env,...
  map_conf,...
  origin_env,...
  origin_conf,...
  cellsize_env,...
  cellsize_conf,...
  cellsize_org ] = fMapStuff( para_,dir_ );



%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       SENSING PARAMETERS
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
FoV = para_.FieldOfViewDEG;
SensorRange.m = para_.SensingRangeM;
SensorRange.cell = SensorRange.m/cellsize_env;

para_.numFoVs = 8; % nummber of elementray sensing action per cell.


%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       PREPROCESS
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_detection.preprocess
    
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '       PREPROCESS - EXPLORATION PLAN \n',...
    '*********************************************\n\n'])
    visualize = 0;
    
    % preprocessing parametes:
    % --------------------------
    para_.GraphCnt                 = 8; % graph connectivity (4/8).
    %para_.numFoVs                  = 8; % nummber of elementray sensing action per cell.
    para_.Ct                       = 0; % travelling cost matrix (yes/no).    
    para_.TravCost                 = 10; % travelling cost (sec) for one meter travel.    
    para_.A                        = 0; % generate connectivity matrix A (yes/no).
    para_.AWM                      = 0; % artificial world map (yes/no).
    para_.do_nTCell                = 0;
    para_.nTLength                 = 3; % non traversable area around an obstacle (meters).
    %para_.SensorDomainComputation = 'ComputeNew';
    para_.SensorDomainComputation  = 'UseEarlier';
    
    % preprocess
    [  SensorRange,...
       OBSenv,...
       OBSconf,...
       V,...
       oV,...
       FoVfaces,...
       confKept,...
       confRemoved,...
       cellKept,...
       cellRemoved,...
       T,...
       E,...
       eE,...
       A,...
       oA,...
       Ct,...
       o,...
       P,...
       tPreprocess ] = fPreprocessGD( FoV,...
                                      SensorRange,...
                                      para_,...
                                      dir_,...
                                      visualize );
    save([dir_.gdplan_spp,'preprocess_detection.mat'],...
        'SensorRange',...
        'OBSenv',...
        'OBSconf',...
        'V',...
        'oV',...
        'FoVfaces',...
        'confKept',...
        'confRemoved',...
        'cellKept',...
        'cellRemoved',...
        'T',...
        'E',...
        'eE',...
        'A',...
        'oA',...
        'Ct',...
        'o',...
        'P',...
        'tPreprocess');
                 
end


%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       SENSOR PLACEMENT PROBLEM
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_detection.spp
    
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '       SPP - EXPLORATION PLAN \n',...
    '*********************************************\n\n'])
    
    visualize = 0;
    load([dir_.gdplan_spp,'preprocess_detection.mat'],...
        'V',...
        'oV',...
        'FoVfaces',...
        'confKept');
    
    % spp parameters
    % --------------------------------------------------------------
    % para_.Algorithm = 'Comb';  % Options: 'Comb','convSPP'
    % para_.AlgoRev   = 2;       % Revision.
    para_.Algorithm = 'convSPP';  % Options: 'Comb','convSPP'
    para_.AlgoRev   = 5;       % Revision.
    para_.Prog      = 'GRB';   % Options: 'CVX','GRB','MOT'
    para_.numHistIR = 5;       % 
    para_.maxIterat = 150;     % Maximum number of iterations.
    para_.numCu     = 80;      % Number of uncertain confs. to terminate RWL1.
    
    % spp
    [ C,...
      C0,...
      C1,...
      Cu,...
      combC,...
      lBound,...
      uBound,...
      logs_rwl1,...
      tSPP_rwl1,...
      tSPP_Comb,...
      tSPP ] = fPlan_GD_FullCoverage( V,para_ );
    
    save([dir_.gdplan_spp,'spp_detection_solution.mat'],...
        'C',...
        'C0',...
        'C1',...
        'Cu',...
        'combC',...
        'lBound',...
        'uBound',...
        'logs_rwl1',...
        'tSPP_rwl1',...
        'tSPP_Comb',...
        'tSPP');
    
    
end


%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       TRAVELLING SALESMAN PROBLEM
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_detection.tsp
    
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '       TSP - EXPLORATION PLAN \n',...
    '*********************************************\n\n'])
    visualize = 0;
    
    load([dir_.gdplan_spp,'preprocess_detection.mat'],...
            'OBSenv',...
            'oV',...
            'FoVfaces',...
            'confKept',...
            'confRemoved',...
            'cellKept',...
            'cellRemoved',...
            'T',...
            'E',...
            'o');

    load([dir_.gdplan_spp,'spp_detection_solution.mat'],'C')

    Conf = zeros(size(oV,2),1);
    Conf(confKept) = C;

    %--------------------
    %       TSP
    %--------------------

    % {
    % conf vector for tsp.
    ConfTSP = Conf';

    f = FoVfaces.num;


    % if robotStartCellInMap
    robotStartPosition_ind = sub2ind(size(map_env),origin_conf(1),...
                                                   origin_conf(2));
    robotStartConf_ind = ((robotStartPosition_ind-1)*f)+1;
    ConfTSP(robotStartConf_ind) = 1;
    % end
    
    % removing conf on occupied cells
    % --------------------------------
    % obs-conf nums
    confOBS = zeros(numel(OBSenv.ind)*f,1);
    for i = 1:numel(OBSenv.ind)
        confOBS(((i-1)*f)+1:((i-1)*f)+f) = (((OBSenv.ind(i)-1)*f)+1):(((OBSenv.ind(i)-1)*f)+f);
    end
    ConfTSP(:,confOBS)  = [];

    ConfTSP = ConfTSP';


    % TSP PARAMETERS
    % --------------
    para_.TravCost   = 10; %ParamPreprocess.TravCost;
    para_.ConfOBS    = 1;
    para_.EoTinAstar = 1; %0; 1 for simplified path A*, 0 for complex path A*
    
    [ tRoute,...
      tCost,...
      tTSP ] = fTSP2( o,...
                      FoVfaces,...
                      ConfTSP,...
                      E,...
                      T,...
                      map_env,...
                      OBSenv,...
                      para_ );

    % traveling route with sequence starting from initial position
    tRouteOrderedWRTStart = tRoute(1:end-1,:);
    
    tRouteOrderedWRTStart = circshift(tRouteOrderedWRTStart,numel(tRouteOrderedWRTStart)-...
        find(tRouteOrderedWRTStart==robotStartConf_ind)+1);

    % conf sequence number in the order of conf vector index (start position is not a conf)
    [~,confSequenceNum,~] = intersect(tRouteOrderedWRTStart,find(Conf));

    % since start position is not a conf,
    confSequenceNum = confSequenceNum-1;
    save([dir_.gdplan_spp,'tsp_detection_solution.mat'],...
        'tRoute',...
        'tCost',...
        'tTSP',...
        'confSequenceNum',...
        'tRouteOrderedWRTStart');
    
end




%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       GROUND TRUTH
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_detection.ground_truth == 1
    
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '               GROUND TRUTH \n',...
    '*********************************************\n\n'])
    
    visualize = 1;
    if strcmp(para_.GroundTruthType,'simulated')
        [ map_con ] = fGroundTruthSimulated( map_env,...
                                             para_,...
                                             visualize,...
                                             dir_);
                                          
    elseif strcmp(para_.GroundTruthType,'manual')
        [ map_con ] = fGroundTruthManual( map_env,...
                                          para_,...
                                          visualize,...
                                          dir_ );
    end
    
    % save averaged gas concentration to a file
    % -----------------------------------------
    gt_filename = sprintf('map_con.dat');
    fileID = fopen([dir_.gt,gt_filename],'wt'); fclose(fileID);
    dlmwrite([dir_.gt,gt_filename],...
        map_con,'-append','delimiter',' ');
    fileID = fopen([dir_.gt,gt_filename],'a'); fclose(fileID);
end


%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       MEASUREMENT COLLECTION
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_detection.measurements == 1
    
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '       MEASUREMENTS COLLECTION \n',...
    '*********************************************\n\n'])
    
    visualize = 0;
    
    %===================================
    % load data
    %===================================
    load([dir_.gdplan_spp,'preprocess_detection.mat'],...
            'oV',...
            'SensorRange',...
            'FoVfaces',...
            'confKept');
    load([dir_.gdplan_spp,'spp_detection_solution.mat'],'C');
    load([dir_.gdplan_spp,'tsp_detection_solution.mat'],'confSequenceNum');
    
    %===================================
    % executable confs
    %===================================
    %-- plan type
    %para_.PlanType = 'two-step-exploration-detection';
    %dir_.ROSLogsThis = sprintf('%s%s/',dir_.ROSLogs,para_.PlanType);
    %dir_.logs = dir_.DetectionLogs;
    [sensing_confs] = fExecutableConfsGD( FoVfaces,...
                                          SensorRange,...
                                          FoV,...
                                          oV,...
                                          C,...
                                          confSequenceNum,...
                                          confKept,...
                                          map_env,...
                                          dir_,...
                                          para_ );
    
    %===================================
    % execute the confs
    %===================================
                                             
    switch para_.SensingSystem
        
            %======================================
        case 'robot-sampling'
            %======================================
            sensing_confs = sensing_confs(:,1:3);
            conf_sequence_num = size(sensing_confs,1);
            fRobotMeasurement( sensing_confs,...
                               conf_sequence_num,...
                               dir_,...
                               para_ );

            %======================================
        case 'simulated-sampling'
            %======================================
            filename = 'executed_confs_final.txt';             
            confs_executed = sensing_confs(:,1:6);
            confs_executed(:,7) = 0;
            fileID = fopen([dir_.gdplan_logs,filename],'wt'); fclose(fileID);
            % -- write integral concentration data to the file
            dlmwrite([dir_.gdplan_logs,filename],confs_executed,...
                'delimiter',' ','precision','%06.2f');
            fileID = fopen([dir_.gdplan_logs,filename],'a'); fclose(fileID);
            
            % -- for all the conf
            for i = 1:size(sensing_confs,1)
                %-- this conf
                sensing_conf = sensing_confs(i,:);
                %-- measurement file name
                measu_file = sprintf('measurement_conf%02d.dat',i);
                %-- measurement
                fprintf('--> Conf# %02d to execute....\n',i);
                fSimulatedMeasurement( sensing_conf,...
                                       measu_file,...
                                       map_env,...
                                       para_,...
                                       dir_,...
                                       visualize );
            end
    end
end


%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       COARSE GDM
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_detection.recons
    
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '       RECONSTRUCTION - EXPLORATION PLAN \n',...
    '*********************************************\n\n']);
    
    
    %dir_.logs = dir_.DetectionLogs; 
    dir_.Recon = dir_.gdplan_recon;
    visualize = 0;
    
    dir_.MeasurementLogs = dir_.gdplan_logs;
    
    [ M,...
      mean_map,...
      cell_coords_x,...
      cell_coords_y ] = fReconstructionFixed( para_,...
                                              dir_,...
                                              visualize );
    save([dir_.gdplan_recon,'coarse_gdm.mat'],...
        'M','mean_map','cell_coords_x','cell_coords_y');
end



%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       SENSING COVERAGE
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_detection.coverage == 1 
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '                 COVERAGE \n',...
    '*********************************************\n\n']);
     para_.ConfType = 'Planned'; %'Executed'
    %para_.ConfType = 'Executed';
    sensingCoverage = fCalculateCoverage( map_env,SensorRange,FoV,para_,dir_ );
    save([dir_.gdplan_spp,'sensing_coverage.mat'],'sensingCoverage');
end

%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%
%       TRAVELLING PATH AND DISTANCE
%
%
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if solve_detection.traveling_path_dist == 1 
    
    fprintf(1,['\n\n',...
    '*********************************************\n',...
    '         SPP TRAVELING PATH/DISTANCE \n',...
    '*********************************************\n\n']);
    para_.ConfType = 'Planned'; %'Executed'
    [ travelingPath,travelingDist ] = fTravelingPathDist( map_env,para_,dir_ );
    save([dir_.gdplan_spp,'traveling_path_dist.mat'],...
        'travelingPath','travelingDist');
end




end